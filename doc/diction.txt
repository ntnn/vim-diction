*diction.txt*	For Vim Version 7.4 and up	Last change: 2016 Apr 24

			VIM-DICTION DOCUMENTATION by Nelo-T. Wallus

Help on using vim-diction                                             *diction*

    1. Introduction ............................... |diction-intro|
    2. Configuration .............................. |diction-configuration|
    3. Usage ...................................... |diction-usage|
    4. Database ................................... |diction-database|

==============================================================================
 1. INTRODUCTION                                                *diction-intro*

Diction, noun: >
    choice of words especially with regard to correctness, clearness, or effectiveness

    source: Merriam-Webster, 2016
<

vim-diction parses databases determined by |'diction_databases'|, looks
for bad diction and fills the quickfix list with explanations and
suggestions.

==============================================================================
 1. CONFIGURATION                                       *diction-configuration*

Available mappings:

    <Plug>Diction ............................. |:Diction|
    <Plug>LDiction ............................ |:LDiction|

Available options:
    diction_debug ............................. |'diction_debug'|
    diction_databases ......................... |'diction_databases'|

------------------------------------------------------------------------------
                                                              *'diction_debug'*
Value: numeric ~
Default: unset (0) ~

Print debug messages.

Attention: Verbose and a lot.

------------------------------------------------------------------------------
                                                          *'diction_databases'*
Value: list ~
Default: unset (['en', 'tech_words_to_avoid']) ~

List of databases to parse. By default vim-diction takes the shipped `en` and
`tech_words_to_avoid` if |'diction_databases'| is unset.
The databases are parsed in the order in which they are listed, if a diction
appears in multiple databases the last parsed database containing it wins.

An entry can either be an absolute path, a relative path or a name. In case of
a name vim-diction looks in the directory for shipped databases for a database
with the given name.

If |'diction_databases'| is changed after the first index |:DictionIndex| has
to be run to parse the databases again.

Example: >
    let g:diction_databases = [
                \ '/usr/share/diction/en',
                \ 'tech_words_to_avoid',
                \ '~/gitted_conf/diction'
                \ ]
<

==============================================================================
 3. USAGE                                                       *diction-usage*

The following commands are available:

*:Diction*

Run diction on the current file and parse the output, displaying the result in
the |quickfix| list.

*:LDiction*

Like |:Diction|, displaying the result in the |location-list|.

*:DictionLog*

Saves output of |:messages| in `vim-diction.log`. Intended to be used with
|'diction_debug'|.

*:DictionIndex*

Reindex the databases in |'diction_databases'|.


==============================================================================
 4. DATABASE                                                 *diction-database*

The databases are tsv (tab separated values) files. Each line can either be an
entry or ignored. Ignored lines are comments (1) or empty lines (2).
Entries are either one value (the diction, 3) or two values (diction and
annotation, 4).

Example: >
    1 # comment
    2
    3 simply
    4 of course	Explain why explicitly instead of implicitly. Also helps to avoid errors.
<

A diction should always be accompanied by an annotation and a reference
(Hyperlink, book reference, et cetera) in a comment to the source and deeper
explanation.
If a whole database or group is based on one article, a single reference at
the top of the database or grouping is sufficient.

Dictions are pattern-matched with |'ignorecase'| (|/\c|) and may contain
spaces. Spaces are matched as |[:blank:]| and |/\r|.
In example line 4 matches >
    this is of course a profitable
< as well as >
    taking this course is of
    course a long planned
<

Annotations should be a single, short sentence giving context to when and how
the diction is bad. If possible also an example.

/* vim:tw=78:ts=8:ft=help:norl: */
